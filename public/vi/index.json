[
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-awscli/",
	"title": "Cài đặt và cấu hình AWS CLI",
	"tags": [],
	"description": "",
	"content": "1. Cài đặt Chạy đoạn lệnh dưới đây: curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34;\runzip awscliv2.zip\rsudo ./aws/install 2. Cấu hình Chạy lệnh: aws configure Nhập các thông tin sau:\nAWS Access Key ID: Lấy từ AWS IAM Đăng nhập vào AWS Management Console: Truy cập https://aws.amazon.com/console/. Đăng nhập bằng thông tin xác thực tài khoản AWS. Truy cập IAM: Trong AWS Management Console, tìm kiếm IAM. Chọn IAM từ danh sách dịch vụ để mở bảng điều khiển IAM. Chọn một IAM user: Trong menu bảng điều khiển, nhấp vào Users. Nhấp vào IAM user. 4. Tạo Access Key:\nNhấp vào tab Security credentials. Nhấp vào Create access key. Chọn Command Line Interface (CLI). Thêm thẻ mô tả tùy chọn cho khóa (ví dụ: workshop-key). Nhấp vào Create access key. Trên màn hình tiếp theo, bạn sẽ thấy: Access Key ID. Secret Access Key. Tải xuống tệp .csv chứa thông tin xác thực hoặc sao chép chúng vào một nơi an toàn. Secret Access Key chỉ được hiển thị một lần và không thể lấy lại sau đó.\nAWS Secret Access Key: Nhập từ tệp CSV. Default region name: Ví dụ: us-east-1. Default output format: Nhập json hoặc nhấn Enter để sử dụng mặc định. Cấu hình được lưu trong: %USERPROFILE%\\.aws\\credentials và %USERPROFILE%\\.aws\\config\nKiểm tra cấu hình bằng cách chạy:\naws sts get-caller-identity "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Workshop này cung cấp hướng dẫn thực hành về quản lý nhiều cụm Kubernetes trên AWS bằng Cluster API, kết hợp triển khai GitOps thông qua Argo CD. Cluster API là một dự án của Kubernetes cung cấp các API khai báo để tự động hóa vòng đời cụm, bao gồm khởi tạo, nâng cấp và mở rộng.\nViệc tích hợp Argo CD đảm bảo quy trình triển khai ứng dụng giữa các cụm luôn nhất quán, có thể kiểm soát và tuân thủ theo các nguyên tắc GitOps.\nMục tiêu Tự động hóa vòng đời cụm Kubernetes: khởi tạo, mở rộng, nâng cấp và xóa bỏ. Quản lý nhiều cụm EKS trên AWS bằng Cluster API. Triển khai ứng dụng theo mô hình GitOps giữa các cụm với Argo CD. Tập trung vào kiến trúc đa cụm có khả năng mở rộng, phù hợp với môi trường sản xuất. Sau khi hoàn thành workshop, người tham gia sẽ sở hữu một hệ thống quản lý đa cụm Kubernetes mạnh mẽ, có khả năng vận hành tự động và triển khai ứng dụng dựa trên Git một cách hiệu quả.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/2.2.1-kubectl/",
	"title": "Kubectl (CLI cho Kubernet)",
	"tags": [],
	"description": "",
	"content": "Kubernetes cung cấp một công cụ dòng lệnh để giao tiếp với mặt điều khiển của cụm Kubernetes, sử dụng API của Kubernetes. Công cụ này được đặt tên là Kubectl\nCài đặt Chạy đoạn lệnh dưới đây: curl -LO \u0026#34;https://dl.k8s.io/release/v1.33.3/bin/linux/amd64/kubectl\u0026#34;\rchmod +x ./kubectl\rsudo mv ./kubectl /usr/local/bin/kubectl Kiểm tra cài đặt kubectl version --client "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Kubernetes Multi-Cluster Management với Cluster API",
	"tags": [],
	"description": "",
	"content": "Kubernetes Multi-Cluster Management với Cluster API Tổng quan Workshop này hướng dẫn người tham gia triển khai quản lý đa cụm Kubernetes bằng Cluster API trên AWS. Cluster API là một dự án Kubernetes cung cấp các API khai báo để quản lý vòng đời cụm, cho phép tự động hóa việc cung cấp, nâng cấp và mở rộng cụm.\nMục tiêu Tự động hóa vòng đời cụm Kubernetes (tạo, mở rộng, nâng cấp và xóa). Thiết lập mạng liên cụm để giao tiếp liền mạch. Phân phối khối lượng công việc giữa các cụm để đảm bảo tính sẵn sàng cao và khả năng mở rộng. Áp dụng các chính sách quản trị và bảo mật để đảm bảo tuân thủ và vận hành an toàn. Áp dụng chiến lược quản lý chi phí để tối ưu hóa việc sử dụng tài nguyên AWS. Xác định quy trình vận hành cho quản lý đa cụm. Workshop sử dụng AWS EKS (Elastic Kubernetes Service) với Cluster API để quản lý nhiều cụm, tập trung vào triển khai thực hành. Sau ưorkshop, người tham gia sẽ có một hệ thống đa cụm hoạt động với quản lý vòng đời tự động, mạng an toàn và vận hành tối ưu chi phí.\nNội dung Giới thiệu Các bước chuẩn bị Khởi tạo cluster quản lý Cluster API Tạo Workload Clusters Tự động nâng cấp và mở rộng Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "\rBạn cần thiết lập các công cụ và môi trường AWS cần thiết để thực hiện bài thực hành này.\nNội dung Cài đặt và cấu hình AWS CLI Cài đặt các công cụ "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/",
	"title": "Cài đặt công cụ",
	"tags": [],
	"description": "",
	"content": "Nội dung Kubectl (CLI cho Kubernet) Eksctl (CLI cho Amazon EKS) Clusterctl (CLI cho Cluster API) Tài liệu bổ sung AWS IAM AWS CLI Configuration kubectl eksctl clusterctl AWS EKS "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/2.2.2-eksctl/",
	"title": "Eksctl (CLI cho Amazon EKS)",
	"tags": [],
	"description": "",
	"content": "eksctl là một công cụ dòng lệnh dùng để tạo và quản lý các cụm Kubernetes trên Amazon EKS. Công cụ này đơn giản hóa các tác vụ quản lý cụm bằng cách sử dụng API của AWS.\nCài đặt Chạy đoạn lệnh dưới đây: curl --silent --location \u0026#34;https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\u0026#34; | tar xz -C /tmp\rsudo mv /tmp/eksctl /usr/local/bin/\rsudo chmod +x /usr/local/bin/eksctl Kiểm tra cài đặt Chạy lệnh sau trong Command Prompt hoặc PowerShell:\neksctl version "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/2.2.3-clusterctl/",
	"title": "Clusterctl (CLI cho Cluster API)",
	"tags": [],
	"description": "",
	"content": "clusterctl là một công cụ dòng lệnh dùng để quản lý các cụm Kubernetes thông qua Cluster API. Công cụ này đơn giản hóa việc tạo, nâng cấp và xóa các cụm bằng cách tương tác với các nhà cung cấp Cluster API.\nCài đặt Cài đặt file nhị phân clusterctl bằng curl trên Windows sử dụng PowerShell\nChuyển đến thư mục làm việc nơi bạn muốn tải clusterctl. Tải phiên bản mới nhất; trên Windows, gõ: curl.exe -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.10.4/clusterctl-windows-amd64.exe -o clusterctl.exe Thêm vào biến môi trường PATH\nMở Edit the system environment variables trên Windows. Trong System Variables, tìm và chỉnh sửa biến Path. Thêm đường dẫn đến thư mục chứa clusterctl.exe (ví dụ: C:\\Program Files\\clusterctl). Lưu thay đổi. Xác minh cài đặt Kiểm tra để đảm bảo phiên bản bạn đã cài đặt là mới nhất:\nclusterctl version "
},
{
	"uri": "//localhost:1313/vi/3-iniclusters/",
	"title": "Khởi tạo Cluster API quản lý cluster",
	"tags": [],
	"description": "",
	"content": "1️⃣ Fork và clone repository Bạn cần fork repository mẫu eks-ec2-clusterapi-gitops về tài khoản GitHub của mình, sau đó clone về máy :\ncd ./eks-ec2-clusterapi-gitops Repository này chứa các manifest và cấu hình cần thiết để triển khai cụm EKS và Cluster EC2 bằng Cluster API kết hợp GitOps.\n2️⃣ Tạo cụm Kind làm cụm quản lý Cluster API cần một cụm Kubernetes để đóng vai trò cụm quản lý (management cluster). Trong bước này, bạn sử dụng Kind để tạo cụm Kubernetes chạy trên Docker:\nkind create cluster\rkubectl cluster-info --context kind-kind Lệnh kubectl cluster-info giúp xác nhận rằng cụm Kind đã được tạo thành công và có thể truy cập.\n3️⃣ Khởi tạo IAM cho Cluster API Provider for AWS Cluster API sử dụng một công cụ tên là clusterawsadm để tạo các tài nguyên IAM cần thiết trên AWS. Công cụ này sẽ tạo một CloudFormation stack để cấp quyền cho cụm quản lý có thể tạo các cụm EKS:\nclusterawsadm bootstrap iam create-cloudformation-stack --region us-east-1 CloudFormation stack này bao gồm các role và policy cần thiết để Cluster API có thể thao tác với AWS.\n4️⃣ Định nghĩa các biến môi trường cần thiết Trước khi khởi tạo Cluster API, bạn cần thiết lập các biến môi trường để cung cấp thông tin xác thực và cấu hình:\nexport AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm bootstrap credentials encode-as-profile)\rexport AWS_REGION=us-east-1\rexport EKS=true\rexport EXP_MACHINE_POOL=true\rexport CAPA_EKS_IAM=true AWS_B64ENCODED_CREDENTIALS: Mã hóa thông tin xác thực AWS để Cluster API sử dụng. EKS=true: Kích hoạt chế độ triển khai EKS. EXP_MACHINE_POOL=true: Cho phép sử dụng MachinePool (tính năng mở rộng node group). CAPA_EKS_IAM=true: Kích hoạt IAM integration cho EKS. 5️⃣ Khởi tạo Cluster API với nhà cung cấp (provider) AWS Cuối cùng, bạn sử dụng lệnh clusterctl init để cài đặt các thành phần Cluster API vào cụm Kind, biến nó thành cụm quản lý:\nclusterctl init --infrastructure aws Lệnh này sẽ cài đặt:\nInfrastructure provider: cluster-api-provider-aws Bootstrap provider: kubeadm Control plane provider: kubeadm Sau bước này, cụm Kind đã sẵn sàng để tạo và quản lý các cụm EKS trên AWS.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/2.2.4.clusterawsadm/",
	"title": "Clusterawsadm",
	"tags": [],
	"description": "",
	"content": "clusterctl là một công cụ dòng lệnh dùng để quản lý các cụm Kubernetes thông qua Cluster API. Công cụ này đơn giản hóa việc tạo, nâng cấp và xóa các cụm bằng cách tương tác với các nhà cung cấp Cluster API.\nCài đặt Chạy đoạn lệnh dưới đây: curl -LO https://github.com/kubernetes-sigs/cluster-api-provider-aws/releases/download/v2.8.4/clusterawsadm-linux-amd64\rchmod +x clusterawsadm-linux-amd64\rsudo install -o root -g root -m 0755 clusterawsadm-linux-amd64 /usr/local/bin/clusterawsadm Xác minh cài đặt Kiểm tra để đảm bảo phiên bản bạn đã cài đặt là mới nhất:\nclusterctl version "
},
{
	"uri": "//localhost:1313/vi/4-creclusters/",
	"title": "Tạo Workload Cluster",
	"tags": [],
	"description": "",
	"content": "Tạo cụm Kubernetes chạy trên EC2 và EKS Tạo SSH Key Cluster API cần SSH key để truy cập vào các node EC2. Bạn tạo hai key riêng biệt cho từng vùng:\naws ec2 create-key-pair --key-name capi-eks --region ap-southeast-2 --query \u0026#39;KeyMaterial\u0026#39; --output text \u0026gt; capi-eks.pem\raws ec2 create-key-pair --key-name capi-ec2 --region us-east-1 --query \u0026#39;KeyMaterial\u0026#39; --output text \u0026gt; capi-ec2.pem Lưu ý: EC2 và EKS được triển khai ở hai vùng khác nhau nên cần tạo key tương ứng.\nĐịnh nghĩa biến môi trường export AWS_CONTROL_PLANE_MACHINE_TYPE=t3.medium\rexport AWS_NODE_MACHINE_TYPE=t3.medium Các biến này xác định loại máy EC2 sẽ được sử dụng cho control plane và worker node.\nTạo manifest cụm EC2 export AWS_SSH_KEY_NAME=capi-ec2\rexport AWS_REGION=us-east-1 clusterctl generate cluster capi-ec2 --kubernetes-version v1.31.0 --control-plane-machine-count=3 --worker-machine-count=3 \u0026gt; ./capi-cluster/aws-ec2/aws-ec2.yaml Lệnh này tạo file YAML định nghĩa cụm Kubernetes chạy trên EC2, bao gồm 3 node control plane và 3 node worker.\nTạo manifest cụm EKS export AWS_SSH_KEY_NAME=capi-eks\rexport AWS_REGION=ap-southeast-2\rclusterctl generate cluster capi-eks --flavor eks-managedmachinepool --kubernetes-version v1.31.0 --worker-machine-count=3 \u0026gt; ./capi-cluster/aws-eks/capi-eks.yaml Sử dụng flavor eks-managedmachinepool để triển khai EKS với node group được quản lý.\nCài đặt Argo CD trên cụm quản lý kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Sau khi cài đặt, lấy mật khẩu đăng nhập lần đầu:\nkubectl get secret argocd-initial-admin-secret -o jsonpath=\u0026#34;{.data.password}\u0026#34; | base64 -d; echo Truy cập giao diện web Argo CD:\nkubectl port-forward svc/argocd-server 8080:80 Username: admin Password: mật khẩu vừa lấy Kết nối Git repo chứa cấu hình cụm bằng cách vào Settings \u0026gt; Repositories \u0026gt; Connect repo.\nPhân quyền cho Argo CD Để Argo CD có thể quản lý các tài nguyên Cluster API, bạn cần cấp quyền cluster-admin cho service account của nó:\nkubectl apply -f ./management/argo-cluster-role-binding.yaml Tạo cụm thông qua Argo CD Argo CD sử dụng manifest kiểu Application để triển khai cụm:\napiVersion: argoproj.io/v1alpha1\rkind: Application\rmetadata:\rname: ec2-cluster\rspec:\rdestination:\rnamespace: default\rserver: https://kubernetes.default.svc\rsource:\rpath: capi-cluster/aws-ec2\rrepoURL: [update the Git Repo accordingly]\rtargetRevision: HEAD\rproject: default\rsyncPolicy:\rautomated:\rprune: true\rallowEmpty: true Sau khi cập nhật file YAML, commit và push lên Git:\ngit add .\rgit commit -m \u0026#34;Update Argo CD app manifest\u0026#34;\rgit push Áp dụng manifest để tạo cụm EC2:\nkubectl apply -f ./management/argocd-ec2-app.yaml Tương tự, tạo cụm EKS:\nkubectl apply -f ./management/argocd-eks-app.yaml Kiểm tra trạng thái cụm clusterctl describe cluster capi-eks\rclusterctl describe cluster capi-ec2 Nếu cụm EC2 chưa sẵn sàng (READY=False), có thể do thiếu CNI. Cài đặt Calico để các node worker có thể tham gia cụm:\nclusterctl get kubeconfig capi-ec2 \u0026gt; capikubeconfig-ec2\rkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml Lấy kubeconfig cho cụm EKS Khác với EC2, kubeconfig của cụm EKS được lưu dưới dạng secret trong cụm quản lý:\nkubectl --namespace=default get secret capi-eks-user-kubeconfig -o jsonpath={.data.value} | base64 --decode \u0026gt; capikubeconfig-eks "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/2.2.5-kind/",
	"title": "Kind",
	"tags": [],
	"description": "",
	"content": "Cài đặt Chạy đoạn lệnh dưới đây: curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64\rchmod +x ./kind\rsudo install -o root -g root -m 0755 ./kind /usr/local/bin/kind Xác minh cài đặt Kiểm tra để đảm bảo phiên bản bạn đã cài đặt là mới nhất:\nclusterctl version "
},
{
	"uri": "//localhost:1313/vi/5-upgrade_scaling/",
	"title": "Tự động nâng cấp và mở rộng",
	"tags": [],
	"description": "",
	"content": "Nâng cấp cụm Kubernetes Việc nâng cấp cụm Kubernetes được quản lý bởi Cluster API là một quy trình khai báo. Bạn chỉ cần cập nhật phiên bản Kubernetes trong các tệp manifest của cụm, sau đó Argo CD sẽ tự động đồng bộ và triển khai thay đổi.\nChọn phiên bản Kubernetes mục tiêu\nVí dụ: v1.32.0. Đảm bảo phiên bản này tương thích với hạ tầng hiện tại và được Cluster API hỗ trợ.\nCập nhật tệp manifest của cụm\nVới cụm EC2 (aws-ec2.yaml): Tìm và cập nhật trường version trong tài nguyên KubeadmControlPlane và MachineDeployment.\nĐảm bảo MachineDeployment sử dụng chiến lược cập nhật cuốn chiếu (rolling update) để tránh downtime:\nstrategy:\rtype: RollingUpdate\rrollingUpdate:\rmaxSurge: 1\rmaxUnavailable: 0 Cấu hình này đảm bảo chỉ một node mới được thêm vào tại một thời điểm, và không có node hiện tại nào bị tắt trong quá trình nâng cấp.\nCommit và push thay đổi lên Git repository.\nArgo CD sẽ phát hiện thay đổi và tự động triển khai. Bạn có thể theo dõi trạng thái đồng bộ trong giao diện Argo CD.\nVới cụm EKS (capi-eks.yaml): Tìm và cập nhật trường version trong tài nguyên AWSManagedControlPlane. Commit và push thay đổi. Argo CD sẽ đồng bộ và áp dụng bản nâng cấp cho cụm EKS. Note: Phương pháp nâng cấp này đảm bảo tính nhất quán, dễ kiểm soát và hoàn toàn tự động thông qua GitOps.\nTự động mở rộng cụm (Autoscaling) Tự động mở rộng cho phép cụm Kubernetes điều chỉnh số lượng node dựa trên mức sử dụng tài nguyên, giúp tối ưu chi phí và hiệu năng.\nTự động mở rộng cho cụm EC2 1. Tạo manifest Cluster Autoscaler Tạo tệp management/cluster-autoscaler.yaml để định nghĩa deployment cho Cluster Autoscaler:\nSử dụng image chính thức: registry.k8s.io/autoscaling/cluster-autoscaler:v1.32.0 Nhắm đến nhóm node EC2: --nodes=1:10:capi-ec2-md-0 Đặt tên cụm: --cluster-name=capi-ec2 Bao gồm các flag để cân bằng, ghi log và xử lý node an toàn Deployment này cho phép autoscaler mở rộng nhóm node từ 1 đến 10 tùy theo nhu cầu.\n2. Cấp quyền RBAC Tạo tệp management/cluster-autoscaler-rbac.yaml để cấp quyền cho autoscaler:\nTạo ServiceAccount: cluster-autoscaler Tạo ClusterRole: cho phép đọc và theo dõi pod, node, machine deployment,\u0026hellip; Tạo ClusterRoleBinding: liên kết role với service account Nếu không có các quyền này, autoscaler sẽ không thể giám sát hoặc điều chỉnh tài nguyên trong cụm.\n3. Triển khai qua Argo CD Tạo manifest Application của Argo CD (management/argocd-autoscaler-app.yaml) để tự động triển khai autoscaler và cấu hình RBAC:\nkubectl apply -f management/argocd-autoscaler-app.yaml Sau khi áp dụng, Argo CD sẽ quản lý autoscaler và giữ nó đồng bộ với Git repo.\nTự động mở rộng cho cụm EKS Với cụm EKS, việc mở rộng thường được xử lý thông qua Managed Node Groups do AWS quản lý.\nCấu hình Managed Node Group Trong manifest EKS (AWSManagedMachinePool), định nghĩa thông số mở rộng:\nspec:\rinstanceType: t3.medium\rscaling:\rmaxSize: 5\rminSize: 1 Cấu hình này cho phép AWS tự động điều chỉnh số lượng node từ 1 đến 5 dựa trên tải công việc.\nLựa chọn khác: Dùng Cluster Autoscaler cho nhóm node không quản lý Nếu bạn sử dụng nhóm node không được quản lý trong EKS, có thể triển khai Cluster Autoscaler thủ công giống như với cụm EC2.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-tools/2.2.6-docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "Kubernetes cung cấp một công cụ dòng lệnh để giao tiếp với mặt điều khiển của cụm Kubernetes, sử dụng API của Kubernetes. Công cụ này được đặt tên là Kubectl\nCài đặt Tải Download Binary Di chuyển đến một thư mục: Di chuyển kubectl.exe đến một thư mục như C:\\Program Files\\kubectl hoặc một thư mục khác Thêm đường dẫn thư mục vào system environment variable sử dụng kubectl từ bất cứ đâu Kiểm tra cài đặt kubectl version --client "
},
{
	"uri": "//localhost:1313/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Dọn Dẹp Tài Nguyên Sau Workshop Để tránh phát sinh chi phí không cần thiết từ AWS và đảm bảo dọn tài nguyên sau khi hoàn thành workshop, hãy thực hiện các bước sau:\nXóa các ứng dụng Argo CD: kubectl delete -f ./management/argocd-ec2-app.yaml kubectl delete -f ./management/argocd-eks-app.yaml\rkubectl delete -f ./app/eks-app/eks-nginx-deploy.yaml Xóa các cụm đã tạo: kubectl delete cluster capi-eks\rkubectl delete cluster capi-ec2 Xóa SSH key EC2 đã tạo ở mỗi vùng: aws ec2 delete-key-pair --key-name capi-eks --region ap-southeast-2\raws ec2 delete-key-pair --key-name capi-ec2 --region us-east-1 Xóa CloudFormation Stack được tạo khi chạy lệnh “clusterawsadm bootstrap”: Khi khởi tạo Cluster API cho AWS, một stack CloudFormation đã được tạo để cấp quyền IAM. Hãy xóa stack này để dọn dẹp các tài nguyên IAM không còn sử dụng.\naws cloudformation delete-stack --stack-name cluster-api-provider-aws-sigs-k8s-io --region us-east-1 Xóa cụm quản lý (Kind cluster): kind delete cluster "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]